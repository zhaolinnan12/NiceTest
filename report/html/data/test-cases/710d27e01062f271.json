{
  "uid" : "710d27e01062f271",
  "name" : "爬虫商品接口",
  "fullName" : "test.test_api.TestApi#test_main",
  "historyId" : "5fa6656b8b1b28bc1fdd0eb962f2b477",
  "time" : {
    "start" : 1607674256959,
    "stop" : 1607674257113,
    "duration" : 154
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test.test_api.TestApi object at 0x10c53ed30>\ncase = ['case_004', '爬虫商品接口', 'ktask/data/mall/ktask/com/item/info?numIid=588076739264&isOrg=true', '读', 'get', 'params', ...]\n\n    @pytest.mark.parametrize('case', cases)\n    def test_main(self, case):\n        response, expect = BaseRequest.send_request(case)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest_api.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errorCode': 'P17', 'errorMessage': '商品不存在', 'isRetry': False, 'result': None, ...}\nexpect_str = '{\"$.success\":true}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应字典\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            actual = extractor(response, k)\n            index += 1\n            print(\"服务端返回结果actual type :\", type(actual))\n            print(\"excel预期结果，v type :\", type(v))\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n>           assert actual == v\nE           AssertionError\n\n../tools/data_process.py:85: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test.test_api.TestApi object at 0x10c53ed30>\ncase = ['case_004', '爬虫商品接口', 'ktask/data/mall/ktask/com/item/info?numIid=588076739264&isOrg=true', '读', 'get', 'params', ...]\n\n    @pytest.mark.parametrize('case', cases)\n    def test_main(self, case):\n        response, expect = BaseRequest.send_request(case)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest_api.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errorCode': 'P17', 'errorMessage': '商品不存在', 'isRetry': False, 'result': None, ...}\nexpect_str = '{\"$.success\":true}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应字典\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            actual = extractor(response, k)\n            index += 1\n            print(\"服务端返回结果actual type :\", type(actual))\n            print(\"excel预期结果，v type :\", type(v))\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n>           assert actual == v\nE           AssertionError\n\n../tools/data_process.py:85: AssertionError",
    "steps" : [ {
      "name" : "请求地址",
      "time" : {
        "start" : 1607674256959,
        "stop" : 1607674256959,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "3ab5065470ced937",
        "name" : "请求地址",
        "source" : "3ab5065470ced937.txt",
        "type" : "text/plain",
        "size" : 96
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1607674256959,
        "stop" : 1607674256960,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e3b59acd3a5708a9",
        "name" : "请求头",
        "source" : "e3b59acd3a5708a9.txt",
        "type" : "text/plain",
        "size" : 319
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "请求参数",
      "time" : {
        "start" : 1607674256960,
        "stop" : 1607674256960,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ecef02b5364f40d1",
        "name" : "请求参数",
        "source" : "ecef02b5364f40d1.txt",
        "type" : "text/plain",
        "size" : 51
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "上传文件",
      "time" : {
        "start" : 1607674256960,
        "stop" : 1607674256961,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e0f8d9ce3a343d2f",
        "name" : "上传文件",
        "source" : "e0f8d9ce3a343d2f.txt",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "响应耗时(s)",
      "time" : {
        "start" : 1607674257094,
        "stop" : 1607674257099,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "8561f9d1f30d824f",
        "name" : "响应耗时(s)",
        "source" : "8561f9d1f30d824f.txt",
        "type" : "text/plain",
        "size" : 7
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "响应内容",
      "time" : {
        "start" : 1607674257100,
        "stop" : 1607674257102,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "b8acc497aa6a7173",
        "name" : "响应内容",
        "source" : "b8acc497aa6a7173.txt",
        "type" : "text/plain",
        "size" : 129
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "存储实际响应",
      "time" : {
        "start" : 1607674257103,
        "stop" : 1607674257106,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "9a45217f3ff6f211",
        "name" : "存储实际响应",
        "source" : "9a45217f3ff6f211.txt",
        "type" : "text/plain",
        "size" : 11932
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "第1个断言",
      "time" : {
        "start" : 1607674257108,
        "stop" : 1607674257111,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "641c990e62613c80",
        "name" : "第1个断言",
        "source" : "641c990e62613c80.txt",
        "type" : "text/plain",
        "size" : 40
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "859f98e779de0744",
      "name" : "stdout",
      "source" : "859f98e779de0744.txt",
      "type" : "text/plain",
      "size" : 94
    }, {
      "uid" : "82f90da74708cbf3",
      "name" : "stderr",
      "source" : "82f90da74708cbf3.txt",
      "type" : "text/plain",
      "size" : 1200
    } ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 10,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestApi"
  }, {
    "name" : "host",
    "value" : "zhaolndeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "33643-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "['case_004', '爬虫商品接口', 'ktask/data/mall/ktask/com/item/info?numIid=588076739264&isOrg=true', '读', 'get', 'params', '', '{\"numlid\":588076739264,\"isOrg\":\"true\"}', '{\"$.success\":true}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "710d27e01062f271.json",
  "parameterValues" : [ "['case_004', '爬虫商品接口', 'ktask/data/mall/ktask/com/item/info?numIid=588076739264&isOrg=true', '读', 'get', 'params', '', '{\"numlid\":588076739264,\"isOrg\":\"true\"}', '{\"$.success\":true}']" ]
}